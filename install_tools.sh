#!/bin/bash

set -e

# change it to the directory where you want to install the tools (e.g /usr/local)
USR_LOCAL="tmp/usr/bin"
OS=$(awk -F= '/^NAME/{print $2}' /etc/os-release | tr -d '"' | tr '[:upper:]' '[:lower:]' | awk '{print $1}')

# list of operating systems supported by this script
OS_LIST=("ubuntu" "debian" "arch")

# create a function to check the operating system
check_os() {
	# get the operating system

	# check if the operating system is supported
	if [[ "${OS_LIST[@]}" =~ "${OS}" ]]; then
		echo "[+] '${OS}' is supported."
	else
		echo "[!] '${OS}' is not supported."
		exit 1
	fi
}

# install golang
install_golang() {
	echo "[+] Trying install golang."
	# change it to get the latest version
	wget https://go.dev/dl/go1.21.6.linux-amd64.tar.gz -O downloads/golang.tar.gz --quiet || {
		echo "[!] Failed to download Go"
		exit 1
	}
	echo "[+] Go downloaded successfully."
	rm -rf /usr/local/go

	sudo tar -xzf downloads/golang.tar.gz -C $USR_LOCAL || {
		echo "[!] Failed to extract Go"
		exit 1
	}
	echo "[+] Go extracted successfully."

	if [ ! -f "${USR_LOCAL}/go/bin/go" ]; then
		echo "[!] Golang not installed"
	else
		if ! grep -q "${USR_LOCAL}/go/bin" ~/.bashrc; then
			echo "export PATH=$PATH:${USR_LOCAL}/go/bin" >>~/.bashrc
			echo "[+] Golang added to $USER path."
		fi
		source ~/.bashrc
		go version || {
			echo "[!] Failed to check Go version"
			exit 1
		}
		echo "[+] Golang installed successfully."
	fi
}

# install pip
install_pip() {
	echo "[+] Trying install pip."
	if [[ "${OS}" == "ubuntu" || "${OS}" == "debian" ]]; then
		sudo apt install -y python3-pip >>/dev/null 2>&1
	elif [[ "${OS}" == "arch" ]]; then
		sudo pacman -S --noconfirm python-pip >>/dev/null 2>&1
	fi
	echo "[+] Pip installed successfully."
}

# install wordlists
install_wordlists() {
	echo "[+] Trying install wordlists."

	#WORDLIST
	sudo mkdir -p /usr/share/wordlists
	sudo wget https://wordlists-cdn.assetnote.io/data/manual/raft-large-extensions.txt -O /usr/share/wordlists/raft-large-extensions.txt
	sudo wget https://wordlists-cdn.assetnote.io/data/manual/raft-large-directories.txt -O /usr/share/wordlists/raft-large-directories.txt
	sudo wget https://wordlists-cdn.assetnote.io/data/automated/httparchive_apiroutes_2022_05_28.txt -O /usr/share/wordlists/httparchive_apiroutes_2022.txt

	sudo wget -c https://github.com/danielmiessler/SecLists/archive/master.zip -O downloads/seclist.zip &&
		sudo unzip downloads/seclist.zip &&
		sudo mv SecLists-master /usr/share/wordlists/seclist &&
		sudo rm -rf downloads/seclist.zip

	echo "[+] WordLists installed successfully."
}

main() {
	# check if the operating system is supported
	check_os

	# update and upgrate packages
	echo "[+] Updating the system."
	if [[ "${OS}" == "ubuntu" || "${OS}" == "debian" ]]; then
		sudo apt update >>/dev/null 2>&1 && sudo apt upgrade -y >>/dev/null 2>&1
	elif [[ "${OS}" == "arch" ]]; then
		sudo pacman -Syu --noconfirm >>/dev/null 2>&1
	fi

	# read -p "Please enter your username: " username

	# create a temporary directory to store the tools
	echo "[+] Creating directory to store the downloads."
	mkdir -p downloads

	# install golang
	install_golang

	# install pip
	install_pip

	# install tools

	echo "[+] Updating the system."
	if [[ "${OS}" == "ubuntu" || "${OS}" == "debian" ]]; then
		echo "[+] Trying install tools with apt."
		sudo apt install -y nmap sqlmap dirb gobuster wafw00f john wireshark >>/dev/null 2>&1 || {
			echo "[!] Failed to install tools apt"
			exit 1
		}

		echo "[+] Trying install sublister."

		echo "[+] Clonnig sublister."
		git clone https://github.com/aboul3la/Sublist3r.git downloads/sublister >>/dev/null 2>&1 || {
			echo "[!] Failed to clone sublister"
			exit 1
		}
		cd downloads/sublister || {
			echo "[!] Failed to change directory"
			exit 1
		}
		echo "[+] Installing requirements."
		sudo pip3 install -r requirements.txt >>/dev/null 2>&1 || {
			echo "[!] Failed to install requirements"
			exit 1
		}

		echo "[+] sublister installed successfully."

	elif [[ "${OS}" == "arch" ]]; then
		echo "[+] Trying install tools with pacman."
		sudo pacman -Syu --noconfirm nmap john hashcat wireshark-qt wireshark-cli sqlmap >>/dev/null 2>&1 || {
			echo "[!] Failed to install tools with pacman"
			exit 1
		}
		echo "[+] Tools installed successfully with pacman."

		echo "[+] Trying install tools with yay."
		yay -Syu --noconfirm dirb gobuster wafw00f sublist3r ffuf >>/dev/null 2>&1 || {
			echo "[!] Failed to install tools with yay"
			exit 1
		}
		echo "[+] Tools installed successfully with yay."
	fi

	install_wordlists

	# install LineNum
	echo "[+] Trying install linenum. (Depreciated)"
	sudo mkdir -p $HOME/.local/share/linenum || {
		echo "[!] Failed to create directory"
		exit 1
	}
	git clone https://github.com/rebootuser/LinEnum.git downloads/linenum || {
		echo "[!] Failed to clone linenum"
		exit 1
	}
	sudo mv downloads/linenum/LinEnum.sh $HOME/.local/share/linenum || {
		echo "[!] Failed to move linenum"
		exit 1
	}
	echo "[+] Creating a symbolic link to linenum."
	sudo ln -s $HOME/.local/share/linenum/LinEnum.sh /usr/local/bin/linenum || {
		echo "[!] Failed to create symbolic link"
		exit 1
	}

	# install ffuf
	echo "[+] Trying install ffuf."
	git clone https://github.com/ffuf/ffuf downloads/ffuf >>/dev/null 2>&1 || {
		echo "[!] Failed to clone ffuf"
		exit 1
	}
	cd downloads/ffuf || {
		echo "[!] Failed to change directory"
		exit 1
	}
	echo "[+] Building ffuf."
	go build >>/dev/null 2>&1 || {
		echo "[!] Failed to build ffuf"
		exit 1
	}
	echo "[+] Creating a symbolic link to ffuf."
	sudo ln -s downloads/ffuf/ffuf /usr/local/bin/ffuf >>/dev/null 2>&1 || {
		echo "[!] Failed to create symbolic link"
		exit 1
	}

	echo "[+] Installation was successful"
}

main
